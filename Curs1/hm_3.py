#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Oct 27 08:56:59 2021

@author: valentin
"""

### 1. Реализовать функцию, принимающую два числа (позиционные аргументы)
# и выполняющую их деление. Числа запрашивать у пользователя, предусмотреть
# обработку ситуации деления на ноль.

def divide(x, y):
    try:
        return x / y
    except ZeroDivisionError as err:
        print('Handling run-time error:', err)

x = int(input('Введите делимое: '))
y = int(input('Введите делитель: '))

divide(x, y)


### 2. Реализовать функцию, принимающую несколько параметров, описывающих
# данные пользователя: имя, фамилия, год рождения, город проживания, email,
# телефон. Функция должна принимать параметры как именованные аргументы.
# Реализовать вывод данных о пользователе одной строкой.

def setPersonData(name, surname, birthday, city, email, phone):
    return f'{name}, {surname}, {birthday}, {city}, {email}, {phone}'

setPersonData(name='Ivan', surname='Ivanov', birthday='15.04.1820', city='Kiev', email='test@email', phone='123456789')


### 3. Реализовать функцию my_func(), которая принимает три позиционных
# аргумента, и возвращает сумму наибольших двух аргументов.

def my_func(*args):
    l = list(args)
    l.sort()
    return sum(l[-2:])

summ = my_func(1,5,2)
    

### 4. Программа принимает действительное положительное число x и целое
# отрицательное число y. Необходимо выполнить возведение числа x в степень y.
# Задание необходимо реализовать в виде функции my_func(x, y). При решении
# задания необходимо обойтись без встроенной функции возведения числа в степень.
#
# Подсказка: попробуйте решить задачу двумя способами. Первый — возведение в
#степень с помощью оператора **. Второй — более сложная реализация без
# оператора **, предусматривающая использование цикла.

def my_pow(x, y):
    return x ** y

def my_pow(x, y):
    total = 1
    
    if (y == 0): 
        return total
        
    for value in range(abs(y)):
        total *= x if y > 0 else 1 / x
        
    return total

result = my_pow(2, -3)


### 5. Программа запрашивает у пользователя строку чисел, разделенных
# пробелом. При нажатии Enter должна выводиться сумма чисел. Пользователь
# может продолжить ввод чисел, разделенных пробелом и снова нажать Enter.
# Сумма вновь введенных чисел будет добавляться к уже подсчитанной сумме.
# Но если вместо числа вводится специальный символ, выполнение программы
# завершается. Если специальный символ введен после нескольких чисел, то
# вначале нужно добавить сумму этих чисел к полученной ранее сумме и после
# этого завершить программу.



def my_sum():
    isEnd = False
    total = 0
    
    while (not(isEnd)):
        string = input('Введите (введите "n" для окончания ввода): ')
        values = string.split()
        # values.sort()
       
        for x in values:
            if x == 'n':
                isEnd = True
                break
            
            total += int(x)

    return total

result = my_sum()
print(result)


### 6. Реализовать функцию int_func(), принимающую слово из маленьких
# латинских букв и возвращающую его же, но с прописной первой буквой.
# Например, print(int_func(‘text’)) -> Text.
# Продолжить работу над заданием. В программу должна попадать строка из слов,
# разделенных пробелом. Каждое слово состоит из латинских букв в нижнем
# регистре. Сделать вывод исходной строки, но каждое слово должно начинаться
# с заглавной буквы. Необходимо использовать написанную ранее функцию int_func().


def int_func(word):
    return word.capitalize()
    
words = input('Введите несколько слов: ')

print(' '.join([int_func(word) for word in words.split()]))

