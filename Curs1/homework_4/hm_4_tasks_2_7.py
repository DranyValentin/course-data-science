#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Nov  1 19:30:07 2021

@author: valentin
"""

### 2. Представлен список чисел. Необходимо вывести элементы исходного списка,
# значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
# Для формирования списка использовать генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
#Результат: [12, 44, 4, 10, 78, 123].

custom_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
new_list = [custom_list[index] for index in range(len(custom_list)) if index > 0 and custom_list[index] > custom_list[index - 1]]


print(new_list)


### 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
# Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.

l = [x for x in range(20, 241) if x % 20 == 0 or x % 21 == 0]
print(l)

### 4. Представлен список чисел. Определить элементы списка, не имеющие
# повторений. Сформировать итоговый массив чисел, соответствующих требованию.
# Элементы вывести в порядке их следования в исходном списке. Для выполнения
# задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

custom_l1 = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]

print([x for x in custom_l1 if custom_l1.count(x) == 1])


### 5. Реализовать формирование списка, используя функцию range() и
# возможности генератора. В список должны войти четные числа от 100 до 1000
# (включая границы). Необходимо получить результат вычисления произведения
# всех элементов списка.
# Подсказка: использовать функцию reduce().

from functools import reduce

custom_list2 = [x for x in range(100, 1001)]

result = reduce(lambda prev_el, el: prev_el * el, custom_list2)
print(result)


### 6. Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools.
# Обратите внимание, что создаваемый цикл не должен быть бесконечным.
# Необходимо предусмотреть условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3, а при достижении
# числа 10 завершаем цикл. Во втором также необходимо предусмотреть условие,
# при котором повторение элементов списка будет прекращено.


from itertools import count, cycle

# итератор А
for x in count(3):
    if (x > 10):
        break
    
    print(x)

# итератор Б
count = 0
for x in cycle([23, 1, 3, 10, 4, 11]):
    if (count > 10):
        break
    
    count += 1
    print(x)
    
    
### 7. Реализовать генератор с помощью функции с ключевым словом yield,
# создающим очередное значение. При вызове функции должен создаваться
# объект-генератор. Функция должна вызываться следующим
# образом: for el in fact(n). Функция отвечает за получение факториала числа,
# а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например,
# факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

def fact(n):
    result = 1
    
    for el in range(1,n+1):
        result *= el
        yield result

n = 4
for el in fact(n):
    print(el)
    
print(f'Факториал {n}: {[el for el in fact(4)][-1]}')
    
### Другой вариант ###
from functools import reduce
def fact(n):
    yield n
    
    n -= 1
    while (n > 1):
        yield next(fact(n))
        n -= 1


num = 4
factorial = reduce(lambda acc, cur: acc * cur, [el for el in fact(num)])
print(f'Факториал {num}: {factorial}')
    
    
    
    