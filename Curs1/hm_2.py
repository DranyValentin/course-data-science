#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Oct 31 20:52:19 2021

@author: valentin
"""

### 1. Создать список и заполнить его элементами различных типов данных.
# Реализовать скрипт проверки типа данных каждого элемента. Использовать
# функцию type() для проверки типа. Элементы списка можно не запрашивать у
# пользователя, а указать явно, в программе.

listTest = (1, 'string', [1,2], (1,2), {'key1': 'value1', 'key2': 'value2'}, {'set1', 'set2'}, None)

for el in listTest:
    print(type(el))
    
    
### 2. Для списка реализовать обмен значений соседних элементов, т.е.
# Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т.д.
# При нечетном количестве элементов последний сохранить на своем месте.
# Для заполнения списка элементов необходимо использовать функцию input().

l = []

while ( not(len(l)) or l[-1] != -1 ):
    l.append(int(input('Введите число (для окончанмя ввода введите -1): ')))
    
l.pop(-1)

print(f'Вы создали список: {l}')

length = len(l)
index = 0

while (length-1 > index):
    l[index] = l[index] + l[index+1]
    l[index+1] = l[index] - l[index+1]
    l[index] = l[index] - l[index+1]
    index += 2

print(f'Cписок после преоброзований: {l}')


### 3. Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить к
# какому времени года относится месяц (зима, весна, лето, осень). Напишите
# решения через list и через dict.

l = ['зима', "зима", "весна", "весна", "весна", "лето", "лето", "лето", "осень", "осень", "осень", "зима"]
d = {
    1: 'зима',
    2: 'зима',
    3: 'весна',
    4: 'весна',
    5: 'весна',
    6: 'лето',
    7: 'лето',
    8: 'лето',
    9: 'осень',
    10: 'осень',
    11: 'осень',
    12: 'зима',
}

month = int(input('Введите месяц числом (от 1 до 12): '))

print('\nПоиск в списке')
print(f'Это {l[month - 1]}')
print('\nПоиск в словаре')
print(f'Это {l[month]}')


### 4. Пользователь вводит строку из нескольких слов, разделённых пробелами.
# Вывести каждое слово с новой строки. Строки необходимо пронумеровать. Если
# в слово длинное, выводить только первые 10 букв в слове.

sentence = input('Введите предложение: ')
words = sentence.split()

for index, word in enumerate(words):
    word = word if len(word) < 10 else f'{word[:10]}...'
    print(f'{index}: {word}')
    

### 5. Реализовать структуру «Рейтинг», представляющую собой не возрастающий
# набор натуральных чисел. У пользователя необходимо запрашивать новый элемент
# рейтинга. Если в рейтинге существуют элементы с одинаковыми значениями, то
# новый элемент с тем же значением должен разместиться после них.
# Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
# Пользователь ввел число 3. Результат: 7, 5, 3, 3, 3, 2.
# Пользователь ввел число 8. Результат: 8, 7, 5, 3, 3, 2.
# Пользователь ввел число 1. Результат: 7, 5, 3, 3, 2, 1.
#Набор натуральных чисел можно задать непосредственно в коде, например, my_list = [7, 5, 3, 3, 2].

rating = [7,5,3,3,2]
num = int(input('Введите натуральное число: '))

result = rating
result.append(num)
result.sort(reverse=True)
result = ', '.join(str(value) for value in result)

print(f'Пользователь ввел число {num}. Результат: {result}.')


###  * Реализовать структуру данных «Товары». Она должна представлять собой
# список кортежей. Каждый кортеж хранит информацию об отдельном товаре.
# В кортеже должно быть два элемента — номер товара и словарь с параметрами
# (характеристиками товара: название, цена, количество, единица измерения).
# Структуру нужно сформировать программно, т.е. запрашивать все данные
# у пользователя.

print('Добавить товар')
isNewProduct = True
products = []
index = 1
productInfo = {}

while (isNewProduct):
    products.append((index, {
        "название": input('Введите название товара: '),
        "цена": input('Введите стоимость товара: '),
        "количество": input('Введите кол-во товара: '),
        "ед": input('Введите единицы измерения: '),
        }))
    index += 1
    isNewProduct = int(input('Будете продолжать добавлять товары (да - 1, нет - 0): '))
    
for productProp in products[0][1]:
    productInfo[productProp] = []
    
for product in products:
    for prop, value in product[1].items():
        productInfo[prop].append(value)
        productInfo[prop] = (set(productInfo[prop]))

print('\nРезультат')
print('-----\n')
for index, value in productInfo.items():
    print(f"{index}: {', '.join(value)}")